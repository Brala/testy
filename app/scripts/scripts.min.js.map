{"version":3,"sources":["script.js"],"names":["list","document","getElementById","searchInput","searchButton","yearsSelector","tagsSelector","globalData","yearsList","tagsList","form","fetchData","fetch","then","resp","json","data","map","raport","date","Date","forEach","element","year","getFullYear","push","Set","sort","a","b","innerHTML","selectedIndex","options","length","text","tag","category","output","index","addEventListener","filterAll","value","chars","tags","filteredData","filter","title","includes","description","tagsSelected","checked","renderData","filesToggleIndex","time","minutesHour","getHours","slice","getMinutes","dayMonthYear","getDate","getMonth","filesOutput","files","file","filename","filesize","attachedFiles","_loop","i","classList","toggle","querySelector","e","preventDefault","window"],"mappings":"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","file":"scripts.min.js","sourcesContent":["const list = document.getElementById(\"list\");\r\nconst searchInput = document.getElementById(\"searchInput\");\r\nconst searchButton = document.getElementById(\"searchButton\");\r\nconst yearsSelector = document.getElementById(\"years\");\r\nconst tagsSelector = document.getElementById(\"tags\");\r\n\r\nlet globalData = [];\r\nlet yearsList = [\"Wszystkie\"];\r\nlet tagsList = [];\r\n\r\n// stop default form behavior\r\nconst form = document.getElementById('form');\r\nform.addEventListener('submit', e => e.preventDefault());\r\n\r\n// --------- Wstępne formatowanie danych z JSON + generowanie szkieletu Filtrownicy  --------- \r\nfunction fetchData() {\r\n\r\n    fetch(\"data.json\")\r\n        .then(function(resp) {\r\n            return resp.json();\r\n        })\r\n        .then(function(data) {\r\n            // format unix_timestamp to js Date()\r\n            data.map(raport => raport.date = new Date(raport.date))\r\n            globalData = data;\r\n\r\n\r\n            // setYears\r\n            data.forEach(element => {\r\n                const year = element.date.getFullYear(); \r\n                yearsList.push(year);\r\n                yearsList = [...new Set(yearsList)];\r\n            })\r\n            yearsList.sort((a, b) => a - b);\r\n            const yearsArrow = '<i class=\"arrow arrow-down\"></i> '\r\n            yearsSelector.innerHTML = yearsArrow\r\n            + yearsList.map(year => `<option>${year}</option>`);\r\n\r\n            yearsSelector.selectedIndex = yearsSelector.options.length-1;\r\n            let strUser = yearsSelector.options[yearsSelector.selectedIndex].text;\r\n\r\n            \r\n            // setTags\r\n            data.forEach(element => {\r\n                const tag = element.category;\r\n                tagsList.push(tag);\r\n                tagsList = [...new Set(tagsList)];\r\n            })\r\n\r\n            let output = `\r\n                <div class=\"form--row\">\r\n                    <input class=\"checkbox\" type=\"checkbox\" name=\"checkAll\" id=\"checkAll\" checked>\r\n                    <label class=\"checklabel\" for=\"checkAll\">Wszystkie <span>&#x2716;</span></label>\r\n                </div>\r\n            `;\r\n\r\n            tagsList.forEach((tag, index) => output += `\r\n                <div class=\"form--row\">\r\n                    <input class=\"checkbox\" type=\"checkbox\" name=\"check${index}\" id=\"check${index}\">\r\n                    <label class=\"checklabel\" for=\"check${index}\">${tag}<span>&#x2716;</span></label>\r\n                </div>\r\n                `\r\n            );    \r\n            tagsSelector.innerHTML = output;\r\n\r\n            //Add listeners to all tags\r\n            document.getElementById(`checkAll`).addEventListener(\"click\", () => filterAll(globalData, yearsSelector.value, searchInput.value));\r\n            tagsList.map((tag, index) => {\r\n                const option = document.getElementById(`check${index}`);\r\n                option.addEventListener(\"click\", () => filterAll(globalData, yearsSelector.value, searchInput.value));\r\n            });   \r\n            \r\n            \r\n            filterAll(globalData, yearsSelector.value, searchInput.value)\r\n        });\r\n}\r\n\r\n\r\n// ---------  Filtrowanie(Przeszukiwanie) danych z JSONa --------- \r\n\r\n// Filter throught all inputs\r\nfunction filterAll( globalData , year , chars , tags ) {\r\n\r\n    let filteredData;\r\n\r\n    // filter by year\r\n    year !== \"Wszystkie\"\r\n    ?   filteredData = globalData.filter(raport => raport.date.getFullYear() == year )\r\n    :   filteredData = globalData;\r\n\r\n    // filter by chars\r\n    filteredData = filteredData.filter(raport => raport.title.includes(chars) || raport.description.includes(chars));\r\n    \r\n    // filter by tags\r\n    const tagsSelected = tagsList.filter((tag,index) => document.getElementById(`check${index}`).checked ? tag : null);   \r\n\r\n    !   document.getElementById(`checkAll`).checked\r\n    ?   filteredData = filteredData.filter(raport => raport.category === tagsSelected[0] ||  raport.category === tagsSelected[1] || raport.category === tagsSelected[2] || raport.category === tagsSelected[3])   // do poprawy\r\n    :   null;\r\n\r\n    renderData(filteredData);\r\n}\r\n// function filterByYear(data,year){\r\n//     const filteredData = data.filter(raport => raport.date.getFullYear() == year );\r\n//     renderData(filteredData);\r\n// }\r\n// function filterByChars(data,chars){\r\n//     const filteredData = data.filter(raport => raport.title.includes(chars) || raport.description.includes(chars));\r\n//     renderData(filteredData);\r\n// }\r\n// function filterByTag(data,value){\r\n//     const tagsSelected = tagsList.filter((tag,index) => document.getElementById(`check${index}`).checked ? tag : null);\r\n//     const filteredData = data.filter(raport => raport.category === tagsSelected[0] ||  raport.category === tagsSelected[1] ||raport.category === tagsSelected[2] ||raport.category === tagsSelected[3]);   \r\n//     document.getElementById(`checkAll`).checked \r\n//     ? renderData(globalData)\r\n//     : renderData(filteredData);\r\n// }\r\n\r\n\r\n\r\n// ---------  Generowanie boxów z raportami w <main> --------- \r\nfunction renderData(data){\r\n\r\n    let output = \"\";\r\n    let filesToggleIndex = 0;\r\n\r\n    data.forEach((element, index) => {  \r\n\r\n        const time = element.date;\r\n        const minutesHour = ('0' + time.getHours()).slice(-2) + \":\" + ('0' + time.getMinutes()).slice(-2);\r\n        const dayMonthYear = ('0' + time.getDate()).slice(-2) + \".\" + ('0' + time.getMonth()).slice(-2) + \".\" + time.getFullYear();\r\n        \r\n        let filesOutput = \"\";\r\n\r\n        element.files.forEach(\r\n            file => filesOutput += `\r\n                <a>\r\n                    Pobierz ${file.filename}.pdf    (${file.filesize}kB)\r\n                </a>`\r\n        );\r\n\r\n        const attachedFiles = \r\n            element.files.length === 0 \r\n            ? \"\"\r\n            : element.files.length === 1 \r\n            ? ` <a>\r\n                    Pobierz ${element.files[0].filename}.pdf    (${element.files[0].filesize}kB)\r\n                </a>`\r\n            : ` <a class=\"block--raport--files--toggled\" id=\"toggleFiles${filesToggleIndex}\"}>\r\n                    Pliki do pobrania (${element.files.length})     \r\n                    <i class=\"arrow arrow-down\"></i>\r\n                </a>\r\n                <div class=\"hidden\" id=\"visibleFiles${filesToggleIndex}\">\r\n                    <hr>\r\n                    ${filesOutput}\r\n                </div>`;\r\n        \r\n        element.files.length >= 2 ? filesToggleIndex++ : null;\r\n\r\n\r\n        output += `\r\n            <div class=\"block clear-fix\">\r\n                <div class=\"block--date-category f-left\">\r\n                    <p><b>${dayMonthYear}</b></p>\r\n                    <p><b>${minutesHour}</b></p>\r\n                    <p>${element.category}</p>\r\n                </div>\r\n                <div class=\"block--raport f-left\">\r\n                    <h2>${element.title}</h2>\r\n                    <p>${element.description}</p>\r\n                    <div class=\"f-left\">\r\n                        <a>Zobacz raport</a>\r\n                    </div>\r\n                    <div class=\"block--raport--files f-left\">\r\n                        ${attachedFiles}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        `;\r\n    });\r\n    // Renderowanie treści\r\n    output === \"\"\r\n    ? list.innerHTML = \"Brak wyników spełniających kryteria\" \r\n    : list.innerHTML = output;\r\n\r\n    // Dodawanie click-listenerów do \"Pliki do pobrania\"\r\n    for( let i=0 ; i<filesToggleIndex ; i++ ){\r\n        document.getElementById(`toggleFiles${i}`).addEventListener(\"click\", () => {\r\n            document.getElementById(`visibleFiles${i}`).classList.toggle(\"hidden\");\r\n            document.querySelector(`#toggleFiles${i} i`).classList.toggle(\"arrow-up\");\r\n        });\r\n    }\r\n}\r\n\r\nwindow.addEventListener(\"load\", fetchData());\r\n\r\nyearsSelector.addEventListener(\"change\", () => filterAll(globalData, yearsSelector.value, searchInput.value));\r\nsearchButton.addEventListener(\"click\", () => filterAll(globalData, yearsSelector.value, searchInput.value));\r\n"]}